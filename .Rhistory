seed_options = seq(1, 20, by=1)
experimentTable = experimentTable %>%
bind_rows(createExperiments("seed", seed_options))
#### Output the experiments table ####
write.table(experimentTable, file="experiments.txt", row.names=FALSE, col.names=FALSE)
# File to create all the experiments that we feed into the
# solver.
library(tidyverse)
# One line corresponds to one experiment
printExperiment = function(experimentVector)
{
fileConn = file("experiments.txt")
write(experimentVector, fileConn)
close(fileConn)
}
experimentTable = tibble(nbORs = 1, nbSurgeries = 1, cf = 1,
cv = 0.3, nbHours = 8.1, meanDuration = 1.1,
stdDuration = 1.1, mu = 1.1, sig = 1.1,
eps1 = 1.1, eps2 = 1.1, nbScenarios = 1, seed = 1)
experimentTable = experimentTable[-1,]
#### Base experiment ####
baseExperiment = tibble(
nbORs 			  = 10,
nbSurgeries   = nbORs,
cf 				    = 1,
cv 				    = 0.3,
nbHours 		  = 8,
meanDuration 	= 200,
stdDuration 	= 12.12^2,
mu 				    = log(meanDuration^2 / sqrt(stdDuration + meanDuration^2)),
sig 			    = sqrt(log(stdDuration / meanDuration^2 + 1)),
eps1 			    = 3,
eps2 			    = 0.1,
nbScenarios 	= 500,
seed 			    = 1
)
experimentTable = baseExperiment
#### Define all experiments ####
createExperiments = function(variableName, values) {
newExperiments = baseExperiment[rep(1, length(values)),]
newExperiments[[variableName]] = values
if (variableName %in% c("meanDuration", "stdDuration")) {
newExperiments[["mu"]] = log(newExperiments[["meanDuration"]]^2 / sqrt(newExperiments[["stdDuration"]] + newExperiments[["meanDuration"]]^2))
newExperiments[["sig"]] = sqrt(log(newExperiments[["stdDuration"]] / newExperiments[["meanDuration"]]^2 + 1))
}
return(newExperiments)
}
gridSize = 10
# Alter the overtime costs
cv_options = seq(0.1, 2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("cv", cv_options))
# Alter meanDuration
meanDur = seq(100, 300, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("meanDuration", meanDur))
# Alter the standard deviation
stdDur = seq(5^2, 20^2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("stdDuration", stdDur))
# Eps1
eps1_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps1", eps1_options))
# Eps2
eps2_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps2", eps2_options))
# Seed
seed_options = seq(1, 20, by=1)
experimentTable = experimentTable %>%
bind_rows(createExperiments("seed", seed_options))
#### Output the experiments table ####
write.table(experimentTable, file="experiments.txt", row.names=FALSE, col.names=FALSE)
View(experimentData)
experimentData = experimentData %>% arrange(id)
View(experimentData)
# R script to show results
library(tidyverse)
library(reshape2)
experimentDir = "code_cpp/experiment output"
# Load all experiments
experimentNames = list.files(experimentDir, pattern = "^experiment[0-9]*$")
# First experiment to determine style of problem
experimentData = read_delim(paste(experimentDir, "/", experimentNames[1], sep=""), delim=" ")
experimentDataLong = melt(experimentData, id="id")
for (experimentName in experimentNames) {
tempData = read_delim(paste(experimentDir, "/", experimentName, sep=""), delim=" ")
experimentData = experimentData %>% bind_rows(tempData)
tempDataMelt = melt(tempData, id="id")
experimentDataLong = experimentDataLong %>%
bind_rows(tempDataMelt)
}
View(experimentData)
View(experimentTable)
View(experimentData)
# R script to show results
library(tidyverse)
library(reshape2)
experimentDir = "code_cpp/experiment output"
# Load all experiments
experimentNames = list.files(experimentDir, pattern = "^experiment[0-9]*$")
# First experiment to determine style of problem
experimentData = read_delim(paste(experimentDir, "/", experimentNames[1], sep=""), delim=" ")
experimentDataLong = melt(experimentData, id="id")
for (experimentName in experimentNames) {
tempData = read_delim(paste(experimentDir, "/", experimentName, sep=""), delim=" ")
experimentData = experimentData %>% bind_rows(tempData)
tempDataMelt = melt(tempData, id="id")
experimentDataLong = experimentDataLong %>%
bind_rows(tempDataMelt)
}
experimentData = experimentData %>%
arrange(id)
View(experimentData)
names(experimentData)
ggplot(experimentData) + geom_bar(aes(x=id, y=runTimeSaa))
ggplot(experimentData) + geom_bar(aes(x=runTimeSaa, y=runTimeSaa))
ggplot(experimentData) + geom_bar(aes(x=runTimeSaa))
experimentData[["runTimeSaa"]]
ggplot(experimentData) + geom_histogram(aes(x=runTimeSaa))
ggplot(experimentData) + geom_histogram(aes(x=runTimeSaa)) + geom_histogram(aes(x=runTimeBender))
View(experimentDataLong)
ggplot(filter(experimentDataLong, variable %in% c("runTimeSaa", "runTimeBender"))) +
geom_histogram(aes(x=value, colour=variable))
ggplot(filter(experimentDataLong, variable %in% c("runTimeSaa", "runTimeBender"))) +
geom_histogram(aes(x=value, colour=variable)) + theme_bw()
# Create new variables
experimentData = experimentData %>%
mutate(runTimeDiff = runTimeBender - runTimeSaa)
# Transform experiment data
ggplot(experimentData) + geom_histogram(aes(x=runTimeDiff)) + theme_bw()
View(experimentData)
ggplot(filter(experimentData, id > 1 & id < 12)) + geom_line(aes(x=cv, y=TC))
experimentData = experimentData %>%
mutate(runTimeDiff = runTimeBender - runTimeSaa,
TC = FSC + SSC)
ggplot(filter(experimentData, id > 1 & id < 12)) + geom_line(aes(x=cv, y=TC))
names(experimentData)
# Run time differences
ggplot(experimentData) + geom_histogram(aes(x=runTimeDiff)) + theme_bw() +
ggtitle("Histogram of the time difference between L-Shaped and SAA method")
# Total cost as a function of cv
ggplot(filter(experimentData, id > 1 & id < 12)) + geom_line(aes(x=cv, y=TC)) +
ggtitle("Total cost vs. overtime cost") + theme_bw()
# Lambda value
ggplot(experimentData) + geom_line(x=lambda, y=TC) + theme_bw() +
ggtitle("Value of lambda vs. total cost")
ggplot(experimentData) + geom_line(aes(x=lambda, y=TC)) + theme_bw() +
ggtitle("Value of lambda vs. total cost") +
xlab("Lambda") + ylab("Total cost")
ggplot(experimentData) + geom_line(aes(x=lambda, y=TC)) + theme_bw() +
ggtitle("Value of lambda vs. total cost") +
xlab("Lambda") + ylab("Total cost") + coord_fixed()
# Variance for same problem
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeDiff)) +
theme_bw() + ggtitle("Histogram of the run-time difference between L-Shaped and SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeBender)) +
theme_bw() + ggtitle("Histogram of the run time of the L-Shaped method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
# Variance for same problem
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeDiff)) +
theme_bw() + ggtitle("Histogram of the run-time difference between L-Shaped and SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeBender)) +
theme_bw() + ggtitle("Histogram of the run time of the L-Shaped method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeSaa)) +
theme_bw() + ggtitle("Histogram of the run time of the SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
View(experimentData)
ggplot(filter(experimentData, id >= 32 & id <= 42)) + geom_line(aes(x=eps1, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps1") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 43 & id <= 53)) + geom_line(aes(x=eps2, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps1") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 43 & id <= 53)) + geom_line(aes(x=eps2, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps2") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 32 & id <= 32)) + geom_line(aes(x=eps1, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps1") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 32 & id <= 42)) + geom_line(aes(x=eps1, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps1") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 32 & id <= 42)) + geom_line(aes(x=eps1, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps1") +
xlab("eps1") + ylab("Second-stage cost")
ggplot(filter(experimentData, id >= 43 & id <= 53)) + geom_line(aes(x=eps2, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps2") +
xlab("eps2") + ylab("Second-stage cost")
experimentData
experimentData %>% filter(lambda == 0)
load("createResults.R")
library(tidyverse)
library(reshape2)
experimentDir = "code_cpp/experiment output"
#### LOAD EXPERIMENTS ####
# Load all experiments
experimentNames = list.files(experimentDir, pattern = "^experiment[0-9]*$")
# First experiment to determine style of problem
experimentData = read_delim(paste(experimentDir, "/", experimentNames[1], sep=""), delim=" ")
experimentDataLong = melt(experimentData, id="id")
for (experimentName in experimentNames) {
tempData = read_delim(paste(experimentDir, "/", experimentName, sep=""), delim=" ")
experimentData = experimentData %>% bind_rows(tempData)
tempDataMelt = melt(tempData, id="id")
experimentDataLong = experimentDataLong %>%
bind_rows(tempDataMelt)
}
#### TRANSFORM DATA ####
# Create new variables
experimentData = experimentData %>%
mutate(runTimeDiff = runTimeBender - runTimeSaa,
TC = FSC + SSC)
#### FIGURES ####
# Run time differences
create_figures = function(experimentData) {
ggplot(experimentData) + geom_histogram(aes(x=runTimeDiff)) + theme_bw() +
ggtitle("Histogram of the run-time difference between L-Shaped and SAA method") +
xlab("Time (in ms)") + ylab("Frequency")
# Total cost as a function of cv
ggplot(filter(experimentData, id > 1 & id < 12)) + geom_line(aes(x=cv, y=TC)) +
ggtitle("Total cost vs. overtime cost") + theme_bw() +
xlab("Overtime cost") + ylab("Total cost")
# Lambda value
ggplot(experimentData) + geom_line(aes(x=lambda, y=TC)) + theme_bw() +
ggtitle("Value of lambda vs. total cost") +
xlab("Lambda") + ylab("Total cost") + coord_fixed()
# Variance for same problem
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeDiff)) +
theme_bw() + ggtitle("Histogram of the run-time difference between L-Shaped and SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeBender)) +
theme_bw() + ggtitle("Histogram of the run time of the L-Shaped method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeSaa)) +
theme_bw() + ggtitle("Histogram of the run time of the SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
# eps1 and eps2 (NOTE: SAME SEED)
ggplot(filter(experimentData, id >= 32 & id <= 42)) + geom_line(aes(x=eps1, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps1") +
xlab("eps1") + ylab("Lambda")
ggplot(filter(experimentData, id >= 43 & id <= 53)) + geom_line(aes(x=eps2, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps2") +
xlab("eps2") + ylab("Lambda")
ggplot(filter(experimentData, id >= 32 & id <= 42)) + geom_line(aes(x=eps1, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps1") +
xlab("eps1") + ylab("Second-stage cost")
ggplot(filter(experimentData, id >= 43 & id <= 53)) + geom_line(aes(x=eps2, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps2") +
xlab("eps2") + ylab("Second-stage cost")
# STD DEV (multiple seeds and calculate optimality gap)
ggplot(filter(experimentData, id >= 12 & id <= 21)) + geom_line(aes(x=meanDuration, y=FSC)) +
geom_line(aes(x=meanDuration, y=SSC)) + theme_bw() +
ggtitle("Costs vs. Mean surgery duration parameter") +
xlab("Mean surgery duration (in minutes)") + ylab("Cost")
ggplot(filter(experimentData, id >= 22 & id <= 31)) + geom_line(aes(x=stdDuration, y=FSC)) +
geom_line(aes(x=stdDuration, y=SSC)) + theme_bw() +
ggtitle("Costs vs. Std. surgery duration parameter") +
xlab("Std. surgery duration (in minutes)") + ylab("Cost")
}
create_figures(experimentData)
experimentData = experimentData %>%
mutate(runTimeDiff = runTimeBender - runTimeSaa,
TC = FSC + SSC) %>%
arrange(id)
View(experimentData)
load("createResults.R")
source("createResults.R")
# File to create all the experiments that we feed into the
# solver.
library(tidyverse)
# One line corresponds to one experiment
printExperiment = function(experimentVector)
{
fileConn = file("experiments.txt")
write(experimentVector, fileConn)
close(fileConn)
}
experimentTable = tibble(nbORs = 1, nbSurgeries = 1, cf = 1,
cv = 0.3, nbHours = 8.1, meanDuration = 1.1,
stdDuration = 1.1, mu = 1.1, sig = 1.1,
eps1 = 1.1, eps2 = 1.1, nbScenarios = 1, seed = 1)
experimentTable = experimentTable[-1,]
#### Base experiment ####
baseExperiment = tibble(
nbORs 			  = 10,
nbSurgeries   = nbORs,
cf 				    = 1,
cv 				    = 0.08,
nbHours 		  = 8,
meanDuration 	= 200,
stdDuration 	= 12.12^2,
mu 				    = log(meanDuration^2 / sqrt(stdDuration + meanDuration^2)),
sig 			    = sqrt(log(stdDuration / meanDuration^2 + 1)),
eps1 			    = 3,
eps2 			    = 0.1,
nbScenarios 	= 200,
seed 			    = 1
)
experimentTable = baseExperiment
#### Define all experiments ####
createExperiments = function(variableName, values) {
newExperiments = baseExperiment[rep(1, length(values)),]
newExperiments[[variableName]] = values
if (variableName %in% c("meanDuration", "stdDuration")) {
newExperiments[["mu"]] = log(newExperiments[["meanDuration"]]^2 / sqrt(newExperiments[["stdDuration"]] + newExperiments[["meanDuration"]]^2))
newExperiments[["sig"]] = sqrt(log(newExperiments[["stdDuration"]] / newExperiments[["meanDuration"]]^2 + 1))
}
return(newExperiments)
}
gridSize = 10
# Alter the overtime costs
cv_options = seq(0.1, 2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("cv", cv_options))
# Alter meanDuration
meanDur = seq(100, 300, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("meanDuration", meanDur))
# Alter the standard deviation
stdDur = seq(5^2, 20^2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("stdDuration", stdDur))
# Eps1
eps1_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps1", eps1_options))
# Eps2
eps2_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps2", eps2_options))
# Seed
seed_options = seq(1, 20, by=1)
experimentTable = experimentTable %>%
bind_rows(createExperiments("seed", seed_options))
#### Output the experiments table ####
write.table(experimentTable, file="experiments.txt", row.names=FALSE, col.names=FALSE)
# File to create all the experiments that we feed into the
# solver.
library(tidyverse)
# One line corresponds to one experiment
printExperiment = function(experimentVector)
{
fileConn = file("experiments.txt")
write(experimentVector, fileConn)
close(fileConn)
}
experimentTable = tibble(nbORs = 1, nbSurgeries = 1, cf = 1,
cv = 0.3, nbHours = 8.1, meanDuration = 1.1,
stdDuration = 1.1, mu = 1.1, sig = 1.1,
eps1 = 1.1, eps2 = 1.1, nbScenarios = 1, seed = 1)
experimentTable = experimentTable[-1,]
#### Base experiment ####
baseExperiment = tibble(
nbORs 			  = 10,
nbSurgeries   = nbORs,
cf 				    = 1,
cv 				    = 0.1,
nbHours 		  = 8,
meanDuration 	= 200,
stdDuration 	= 12.12^2,
mu 				    = log(meanDuration^2 / sqrt(stdDuration + meanDuration^2)),
sig 			    = sqrt(log(stdDuration / meanDuration^2 + 1)),
eps1 			    = 3,
eps2 			    = 0.1,
nbScenarios 	= 200,
seed 			    = 1
)
experimentTable = baseExperiment
#### Define all experiments ####
createExperiments = function(variableName, values) {
newExperiments = baseExperiment[rep(1, length(values)),]
newExperiments[[variableName]] = values
if (variableName %in% c("meanDuration", "stdDuration")) {
newExperiments[["mu"]] = log(newExperiments[["meanDuration"]]^2 / sqrt(newExperiments[["stdDuration"]] + newExperiments[["meanDuration"]]^2))
newExperiments[["sig"]] = sqrt(log(newExperiments[["stdDuration"]] / newExperiments[["meanDuration"]]^2 + 1))
}
return(newExperiments)
}
gridSize = 10
# Alter the overtime costs
cv_options = seq(0.1, 2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("cv", cv_options))
# Alter meanDuration
meanDur = seq(100, 300, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("meanDuration", meanDur))
# Alter the standard deviation
stdDur = seq(5^2, 20^2, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("stdDuration", stdDur))
# Eps1
eps1_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps1", eps1_options))
# Eps2
eps2_options = seq(0, 5, length.out = gridSize)
experimentTable = experimentTable %>%
bind_rows(createExperiments("eps2", eps2_options))
# Seed
seed_options = seq(1, 20, by=1)
experimentTable = experimentTable %>%
bind_rows(createExperiments("seed", seed_options))
#### Output the experiments table ####
write.table(experimentTable, file="experiments.txt", row.names=FALSE, col.names=FALSE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
library(tidyverse)
library(reshape2)
experimentDir = "code_cpp/experiment output"
#### LOAD EXPERIMENTS ####
# Load all experiments
experimentNames = list.files(experimentDir, pattern = "^experiment[0-9]*$")
# First experiment to determine style of problem
experimentData = read_delim(paste(experimentDir, "/", experimentNames[1], sep=""), delim=" ")
experimentDataLong = melt(experimentData, id="id")
View(experimentData)
names(experimentData)
experimentData[["o_1_1"]]
library(tidyverse)
library(reshape2)
experimentDir = "code_cpp/experiment output"
#### LOAD EXPERIMENTS ####
# Load all experiments
experimentNames = list.files(experimentDir, pattern = "^experiment[0-9]*$")
# First experiment to determine style of problem
experimentData = read_delim(paste(experimentDir, "/", experimentNames[1], sep=""), delim=" ")
experimentDataLong = melt(experimentData, id="id")
for (experimentName in experimentNames) {
tempData = read_delim(paste(experimentDir, "/", experimentName, sep=""), delim=" ")
experimentData = experimentData %>% bind_rows(tempData)
tempDataMelt = melt(tempData, id="id")
experimentDataLong = experimentDataLong %>%
bind_rows(tempDataMelt)
}
#### TRANSFORM DATA ####
# Create new variables
experimentData = experimentData %>%
mutate(runTimeDiff = runTimeBender - runTimeSaa,
TC = FSC + SSC) %>%
arrange(id)
#### FIGURES ####
# Run time differences
create_figures = function(experimentData) {
p = ggplot(experimentData) + geom_histogram(aes(x=runTimeDiff)) + theme_bw() +
ggtitle("Histogram of the run-time difference between L-Shaped and SAA method") +
xlab("Time (in ms)") + ylab("Frequency")
print(p)
# Total cost as a function of cv
p = ggplot(filter(experimentData, id > 1 & id < 12)) + geom_line(aes(x=cv, y=TC)) +
ggtitle("Total cost vs. overtime cost") + theme_bw() +
xlab("Overtime cost") + ylab("Total cost")
print(p)
# Lambda value
p = ggplot(experimentData) + geom_line(aes(x=lambda, y=TC)) + theme_bw() +
ggtitle("Value of lambda vs. total cost") +
xlab("Lambda") + ylab("Total cost") + coord_fixed()
print(p)
# Variance for same problem
p = ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeDiff)) +
theme_bw() + ggtitle("Histogram of the run-time difference between L-Shaped and SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
print(p)
p = ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeBender)) +
theme_bw() + ggtitle("Histogram of the run time of the L-Shaped method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
print(p)
p = ggplot(filter(experimentData, id > 51)) + geom_histogram(aes(x=runTimeSaa)) +
theme_bw() + ggtitle("Histogram of the run time of the SAA method (different seeds)") +
xlab("Time (in ms)") + ylab("Frequency")
print(p)
# eps1 and eps2 (NOTE: SAME SEED)
p = ggplot(filter(experimentData, id >= 32 & id <= 41)) + geom_line(aes(x=eps1, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps1") +
xlab("eps1") + ylab("Lambda")
print(p)
p = ggplot(filter(experimentData, id >= 42 & id <= 51)) + geom_line(aes(x=eps2, y=lambda)) +
theme_bw() + ggtitle("Lambda vs. eps2") +
xlab("eps2") + ylab("Lambda")
print(p)
p = ggplot(filter(experimentData, id >= 32 & id <= 41)) + geom_line(aes(x=eps1, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps1") +
xlab("eps1") + ylab("Second-stage cost")
print(p)
p = ggplot(filter(experimentData, id >= 42 & id <= 51)) + geom_line(aes(x=eps2, y=SSC)) +
theme_bw() + ggtitle("Second-stage cost vs. eps2") +
xlab("eps2") + ylab("Second-stage cost")
print(p)
# STD DEV (multiple seeds and calculate optimality gap)
p = ggplot(filter(experimentData, id >= 12 & id <= 21)) + geom_line(aes(x=meanDuration, y=FSC)) +
geom_line(aes(x=meanDuration, y=SSC)) + theme_bw() +
ggtitle("Costs vs. Mean surgery duration parameter") +
xlab("Mean surgery duration (in minutes)") + ylab("Cost")
print(p)
p = ggplot(filter(experimentData, id >= 22 & id <= 31)) + geom_line(aes(x=stdDuration, y=FSC)) +
geom_line(aes(x=stdDuration, y=SSC)) + theme_bw() +
ggtitle("Costs vs. Std. surgery duration parameter") +
xlab("Std. surgery duration (in minutes)") + ylab("Cost")
print(p)
# Overtime
}
create_figures(experimentData)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
source('~/Documents/LPR/code/createExperiments.R', echo=TRUE)
