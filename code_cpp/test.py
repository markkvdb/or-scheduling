import numpy as np
import matplotlib.pyplot as plt

if __name__== '__main__':

	# Set values of contraints
	x_0 = 1
	x_1 = 0
	x_2 = 0

	y_00 = 1
	y_10 = 1
	y_20 = 1

	y_01 = 0
	y_11 = 0
	y_21 = 0

	y_02 = 0
	y_12 = 0
	y_22 = 0

	l = 0

	# eta >= 
	print(4.5 * x_0  + 4.5 * x_1  + 4.5 * x_2  + -2.01544 * y_00  + -2.01544 * y_01  + -2.01544 * y_02  + -2.0259 * y_10  + -2.0259 * y_11  + -2.0259 * y_12  + -2.01732 * y_20  + -2.01732 * y_21  + -2.01732 * y_22  + -0.1 * l  + 1.55865 + 2.58365)
	# When facing this constraint it is optimal to set lambda high such that we can set eta = 0.
	l = 25.8365

	# Old constraint should now be zero
	print(4.5 * x_0  + 4.5 * x_1  + 4.5 * x_2  + -2.01544 * y_00  + -2.01544 * y_01  + -2.01544 * y_02  + -2.0259 * y_10  + -2.0259 * y_11  + -2.0259 * y_12  + -2.01732 * y_20  + -2.01732 * y_21  + -2.01732 * y_22  + -0.1 * l  + 1.55865 + 2.58365)

	# However we face the new constraint 
	print(3.5 * x_0  + 3.5 * x_1  + 3.5 * x_2  + -1.64899 * y_00  + -1.64899 * y_01  + -1.64899 * y_02  + -1.65755 * y_10  + -1.65755 * y_11  + -1.65755 * y_12  + -1.65053 * y_20  + -1.65053 * y_21  + -1.65053 * y_22  + 0.1 * l  + -1.12657 + 4.51573)

	# Plot these constraints
	l_vals = np.linspace(0, 30, 100)

	constraint1_vals = 4.5 * x_0  + 4.5 * x_1  + 4.5 * x_2  + -2.01544 * y_00  + -2.01544 * y_01  + -2.01544 * y_02  + -2.0259 * y_10  + -2.0259 * y_11  + -2.0259 * y_12  + -2.01732 * y_20  + -2.01732 * y_21  + -2.01732 * y_22  + -0.1 * l_vals  + 1.55865 + 2.58365
	constraint2_vals = 3.5 * x_0  + 3.5 * x_1  + 3.5 * x_2  + -1.64899 * y_00  + -1.64899 * y_01  + -1.64899 * y_02  + -1.65755 * y_10  + -1.65755 * y_11  + -1.65755 * y_12  + -1.65053 * y_20  + -1.65053 * y_21  + -1.65053 * y_22  + 0.1 * l_vals  + -1.12657 + 4.51573
	l_vals2 = np.arange(0, 30, 0.1)
	realvalues = [2.58365, 2.57365, 2.56365, 2.55365, 2.54365, 2.53365, 2.52365, 2.51365, 2.50365, 2.49365, 2.48365, 2.47365, 2.46365, 2.45365, 2.44365, 2.43365, 2.42365, 2.41365, 2.40365, 2.39365, 2.38365, 2.37365, 2.36365, 2.35365, 2.34365, 2.33365, 2.32365, 2.31365, 2.30368, 2.29387, 2.2847, 2.27708, 2.27257, 2.27241, 2.27638, 2.2837, 2.29253, 2.30214, 2.31208, 2.32208, 2.33208, 2.34208, 2.35208, 2.36208, 2.37208, 2.38208, 2.39208, 2.40208, 2.41208, 2.42208, 2.43208, 2.44208, 2.45208, 2.46208, 2.47208, 2.48208, 2.49208, 2.50208, 2.51208, 2.52208, 2.53208, 2.54208, 2.55208, 2.56208, 2.57208, 2.58208, 2.59208, 2.60208, 2.61208, 2.62208, 2.63208, 2.64208, 2.65208, 2.66208, 2.67208, 2.68208, 2.69208, 2.70208, 2.71208, 2.72208, 2.73208, 2.74208, 2.75208, 2.76208, 2.77208, 2.78208, 2.79208, 2.80208, 2.81208, 2.82208, 2.83208, 2.84208, 2.85208, 2.86208, 2.87208, 2.88208, 2.89208, 2.90208, 2.91208, 2.92208, 2.93208, 2.94208, 2.95208, 2.96208, 2.97208, 2.98208, 2.99208, 3.00208, 3.01208, 3.02208, 3.03208, 3.04208, 3.05208, 3.06208, 3.07208, 3.08208, 3.09208, 3.10208, 3.11208, 3.12208, 3.13208, 3.14208, 3.15208, 3.16208, 3.17208, 3.18208, 3.19208, 3.20208, 3.21208, 3.22208, 3.23208, 3.24208, 3.25208, 3.26208, 3.27208, 3.28208, 3.29208, 3.30208, 3.31208, 3.32208, 3.33208, 3.34208, 3.35208, 3.36208, 3.37208, 3.38208, 3.39208, 3.40208, 3.41208, 3.42208, 3.43208, 3.44208, 3.45208, 3.46208, 3.47208, 3.48208, 3.49208, 3.50208, 3.51208, 3.52208, 3.53208, 3.54208, 3.55208, 3.56208, 3.57208, 3.58208, 3.59208, 3.60208, 3.61208, 3.62208, 3.63208, 3.64208, 3.65208, 3.66208, 3.67208, 3.68208, 3.69208, 3.70208, 3.71208, 3.72208, 3.73208, 3.74208, 3.75208, 3.76208, 3.77208, 3.78208, 3.79208, 3.80208, 3.81208, 3.82208, 3.83208, 3.84208, 3.85208, 3.86208, 3.87208, 3.88208, 3.89208, 3.90208, 3.91208, 3.92208, 3.93208, 3.94208, 3.95208, 3.96208, 3.97208, 3.98208, 3.99208, 4.00208, 4.01208, 4.02208, 4.03208, 4.04208, 4.05208, 4.06208, 4.07208, 4.08208, 4.09208, 4.10208, 4.11208, 4.12208, 4.13208, 4.14208, 4.15208, 4.16208, 4.17208, 4.18208, 4.19208, 4.20208, 4.21208, 4.22208, 4.23208, 4.24208, 4.25208, 4.26208, 4.27208, 4.28208, 4.29208, 4.30208, 4.31208, 4.32208, 4.33208, 4.34208, 4.35208, 4.36208, 4.37208, 4.38208, 4.39208, 4.40208, 4.41208, 4.42208, 4.43208, 4.44208, 4.45208, 4.46208, 4.47208, 4.48208, 4.49208, 4.50208, 4.51208, 4.52208, 4.53208, 4.54208, 4.55208, 4.56208, 4.57208, 4.58208, 4.59208, 4.60208, 4.61208, 4.62208, 4.63208, 4.64208, 4.65208, 4.66208, 4.67208, 4.68208, 4.69208, 4.70208, 4.71208, 4.72208, 4.73208, 4.74208, 4.75208, 4.76208, 4.77208, 4.78208, 4.79208, 4.80208, 4.81208, 4.82208, 4.83208, 4.84208, 4.85208, 4.86208, 4.87208, 4.88208, 4.89208, 4.90208, 4.91208, 4.92208]


	plt.plot(l_vals, constraint1_vals, '-', l_vals, constraint2_vals, '-', l_vals2, realvalues)
	plt.ylabel("value")
	plt.xlabel("lambda")
	plt.show()

	# Optimizing gives
	l = 0
	print(3.5 * x_0  + 3.5 * x_1  + 3.5 * x_2  + -1.64899 * y_00  + -1.64899 * y_01  + -1.64899 * y_02  + -1.65755 * y_10  + -1.65755 * y_11  + -1.65755 * y_12  + -1.65053 * y_20  + -1.65053 * y_21  + -1.65053 * y_22  + 0.1 * l  + -1.12657 + 4.51573)

	# Plo